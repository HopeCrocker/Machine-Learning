{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 692,
   "id": "b72699ea-e6dc-4e4f-92a4-9716d403e277",
   "metadata": {},
   "outputs": [],
   "source": [
    "# standard imports\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Do not change this option; This allows the CodeGrade auto grading to function correctly\n",
    "pd.set_option('display.max_columns', 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d74df558-35b9-440c-afa0-54e18c274687",
   "metadata": {},
   "source": [
    "### Data Cleaning\n",
    "In order to clean the data, you will need to perform the following steps, although not necessarily in this order:\n",
    "- Make sure that your notebook is organized and that you include specific comments that explain your code.  Assignments will be manually checked at the end of the course and points may be deducted for insufficient comments. (see Assignment Rubric)\n",
    "- Use only base Python, Pandas, or NumPy for this assignment.  \n",
    "- Combine the files together, as appropriate, so that you have one final DataFrame\n",
    "- The final DataFrame must be named `housing`\n",
    "- Sort the final `housing` DataFrame by `id` in ascending order\n",
    "- Drop any rows with a missing value for the `medianHouseValue` column\n",
    "- Fill any rows with a missing value for the `housingMedianAge` column with the median value for that column\n",
    "- Drop the `state` column since it doesn't offer any added value\n",
    "- In order to match the data that will be worked on in class, you will make the following changes to the values:\n",
    "  - Scale the `medianIncome` to express the values in $10,000 of dollars (example: `150000` will become `15`, `30000` will become `3`, `15000` will become `1.5`, etc)\n",
    "  - In your textbook, it discusses that the median income values have been capped on both the lower and upper ends.  In order to recreate this data, change any values in the `medianIncome` column that are `0.4999` or lower to `0.4999` and change any values that are `15.0001` and higher to `15.0001`.  This step should be done after the previous step.  Take a look at [this stackoverflow answer](https://stackoverflow.com/questions/38876816/change-value-of-a-dataframe-column-based-on-a-filter) if you need help with this step.\n",
    "  - Revert the `medianHouseValue` back to actual dollars (example: `150` will become `150000`, `300` will become `300000`, etc)\n",
    "- Update the column names and column order as shown below to match the data from the module:\n",
    "  - longitude\n",
    "  - latitude\n",
    "  - housing_median_age\n",
    "  - total_rooms\n",
    "  - total_bedrooms\n",
    "  - population\n",
    "  - households\n",
    "  - median_income\n",
    "  - median_house_value\n",
    "  - ocean_proximity\n",
    "- Change all columns to a float data type except for the `ocean_proximity` column.  The `ocean_proximity` column should remain a string/object data type (do not update this to a categorical data type since that will be done later when working with the module data).\n",
    "- Reset the DataFrame index so that it goes from `0` to `n-1`, where `n` is the number of rows in your DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 693,
   "id": "561e6188-e792-405c-8bd3-c2a8868a2537",
   "metadata": {},
   "outputs": [],
   "source": [
    "cal_housing_high = pd.read_csv(\"cal_housing_high.csv\")\n",
    "cal_housing_low = pd.read_csv(\"cal_housing_low.csv\")\n",
    "cal_housing_medium = pd.read_csv(\"cal_housing_medium.csv\")\n",
    "long_lat = pd.read_csv(\"long_lat.csv\")\n",
    "ocean_proximity = pd.read_csv(\"ocean_proximity.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 694,
   "id": "cec4f3cc-da32-464e-bd9d-730e06550e48",
   "metadata": {},
   "outputs": [],
   "source": [
    "###Combine the files together, as appropriate, so that you have one final DataFrame\n",
    "###The final DataFrame must be named housing\n",
    "\n",
    "housing1 = cal_housing_high.merge(cal_housing_low, how = 'outer')\n",
    "housing1 = housing1.merge(cal_housing_medium, how = 'outer') \n",
    "housing1 = housing1.merge(long_lat, how = 'outer') \n",
    "housing1 = housing1.merge(ocean_proximity, how = 'outer') \n",
    "\n",
    "housing1 = pd.DataFrame(housing1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 695,
   "id": "95b867b6-223e-4b88-971f-86873891192c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>state</th>\n",
       "      <th>medianHouseValue</th>\n",
       "      <th>housingMedianAge</th>\n",
       "      <th>totalBedrooms</th>\n",
       "      <th>totalRooms</th>\n",
       "      <th>households</th>\n",
       "      <th>population</th>\n",
       "      <th>medianIncome</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>ocean_proximity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>CA</td>\n",
       "      <td>452.603</td>\n",
       "      <td>45.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>884.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>323.0</td>\n",
       "      <td>83252.0</td>\n",
       "      <td>-122.23</td>\n",
       "      <td>37.88</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>CA</td>\n",
       "      <td>358.502</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1108.0</td>\n",
       "      <td>7103.0</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>2403.0</td>\n",
       "      <td>83014.0</td>\n",
       "      <td>-122.22</td>\n",
       "      <td>37.86</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>CA</td>\n",
       "      <td>352.104</td>\n",
       "      <td>53.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>1468.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>72574.0</td>\n",
       "      <td>-122.24</td>\n",
       "      <td>37.85</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "      <td>CA</td>\n",
       "      <td>341.300</td>\n",
       "      <td>55.0</td>\n",
       "      <td>236.0</td>\n",
       "      <td>1278.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>558.0</td>\n",
       "      <td>56431.0</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>37.85</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5</td>\n",
       "      <td>CA</td>\n",
       "      <td>342.200</td>\n",
       "      <td>54.0</td>\n",
       "      <td>282.0</td>\n",
       "      <td>1628.0</td>\n",
       "      <td>262.0</td>\n",
       "      <td>568.0</td>\n",
       "      <td>38462.0</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>37.85</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id state  medianHouseValue  housingMedianAge  totalBedrooms  totalRooms  \\\n",
       "0   1    CA           452.603              45.0          131.0       884.0   \n",
       "1   2    CA           358.502              23.0         1108.0      7103.0   \n",
       "2   3    CA           352.104              53.0          193.0      1468.0   \n",
       "6   4    CA           341.300              55.0          236.0      1278.0   \n",
       "7   5    CA           342.200              54.0          282.0      1628.0   \n",
       "\n",
       "   households  population  medianIncome  longitude  latitude ocean_proximity  \n",
       "0       130.0       323.0       83252.0    -122.23     37.88        NEAR BAY  \n",
       "1      1141.0      2403.0       83014.0    -122.22     37.86        NEAR BAY  \n",
       "2       180.0       500.0       72574.0    -122.24     37.85        NEAR BAY  \n",
       "6       222.0       558.0       56431.0    -122.25     37.85        NEAR BAY  \n",
       "7       262.0       568.0       38462.0    -122.25     37.85        NEAR BAY  "
      ]
     },
     "execution_count": 695,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Drop any rows with a missing value for the medianHouseValue column\n",
    "housing1 = housing1.dropna(subset=['medianHouseValue'])\n",
    "\n",
    "housing1 = housing1.sort_values(\"id\")\n",
    "housing1.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 696,
   "id": "7ca3fb67-59ff-48e7-b95e-ab3fe3d91507",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Fill any rows with a missing value for the housingMedianAge column with the median value for that column\n",
    "housing1['housingMedianAge'] = housing1['housingMedianAge'].fillna(housing1['housingMedianAge'].median())\n",
    "\n",
    "##Drop the state column since it doesn't offer any added value\n",
    "\n",
    "housing1.drop(['state'], axis=1)\n",
    "\n",
    "housing1 = housing1.iloc[:, [0,9,10, 3, 5, 4, 7, 6, 8,2, 11]]\n",
    "\n",
    "##  - Scale the `medianIncome` to express the values in $10,000 of dollars (example: `150000` will become `15`, `30000` will become `3`, \n",
    "##`15000` will become `1.5`, etc)\n",
    "\n",
    "housing1['medianIncome'] = housing1['medianIncome']/10000\n",
    "\n",
    "\n",
    "##In your textbook, it discusses that the median income values have been capped on both the lower and upper ends. \n",
    "##In order to recreate this data, change any values in the medianIncome column that are 0.4999 or lower to 0.4999 and change any values \n",
    "##that are 15.0001 and higher to 15.0001. This step should be done after the previous step. Take a look at this stackoverflow answer\n",
    "##if you need help with this step.\n",
    "\n",
    "housing1.loc[housing1['medianIncome'] <= .4999, 'medianIncome'] = .4999\n",
    "housing1.loc[housing1['medianIncome'] >= 15.0001, 'medianIncome'] = 15.0001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 697,
   "id": "1a3df29f-8f40-47d1-8a73-387bb5e62ba1",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Revert the medianHouseValue back to actual dollars (example: 150 will become 150000, 300 will become 300000, etc)\n",
    "\n",
    "housing1['medianHouseValue'] = housing1['medianHouseValue']*1000\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 698,
   "id": "980e7e61-93fc-4782-b821-e4bddf17b073",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>housing_median_age</th>\n",
       "      <th>total_rooms</th>\n",
       "      <th>total_bedrooms</th>\n",
       "      <th>population</th>\n",
       "      <th>households</th>\n",
       "      <th>median_income</th>\n",
       "      <th>median_house_value</th>\n",
       "      <th>ocean_proximity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-122.23</td>\n",
       "      <td>37.88</td>\n",
       "      <td>45.0</td>\n",
       "      <td>884.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>323.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>8.3252</td>\n",
       "      <td>452603.0</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>-122.22</td>\n",
       "      <td>37.86</td>\n",
       "      <td>23.0</td>\n",
       "      <td>7103.0</td>\n",
       "      <td>1108.0</td>\n",
       "      <td>2403.0</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>8.3014</td>\n",
       "      <td>358502.0</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>-122.24</td>\n",
       "      <td>37.85</td>\n",
       "      <td>53.0</td>\n",
       "      <td>1468.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>7.2574</td>\n",
       "      <td>352104.0</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>37.85</td>\n",
       "      <td>55.0</td>\n",
       "      <td>1278.0</td>\n",
       "      <td>236.0</td>\n",
       "      <td>558.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>5.6431</td>\n",
       "      <td>341300.0</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>37.85</td>\n",
       "      <td>54.0</td>\n",
       "      <td>1628.0</td>\n",
       "      <td>282.0</td>\n",
       "      <td>568.0</td>\n",
       "      <td>262.0</td>\n",
       "      <td>3.8462</td>\n",
       "      <td>342200.0</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11988</th>\n",
       "      <td>21554</td>\n",
       "      <td>-121.09</td>\n",
       "      <td>39.48</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1665.0</td>\n",
       "      <td>374.0</td>\n",
       "      <td>847.0</td>\n",
       "      <td>332.0</td>\n",
       "      <td>1.5603</td>\n",
       "      <td>78101.0</td>\n",
       "      <td>INLAND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13786</th>\n",
       "      <td>21555</td>\n",
       "      <td>-121.21</td>\n",
       "      <td>39.49</td>\n",
       "      <td>18.0</td>\n",
       "      <td>701.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>2.5568</td>\n",
       "      <td>77102.0</td>\n",
       "      <td>INLAND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13787</th>\n",
       "      <td>21556</td>\n",
       "      <td>-121.22</td>\n",
       "      <td>39.43</td>\n",
       "      <td>19.0</td>\n",
       "      <td>2257.0</td>\n",
       "      <td>488.0</td>\n",
       "      <td>1007.0</td>\n",
       "      <td>437.0</td>\n",
       "      <td>1.7000</td>\n",
       "      <td>92301.0</td>\n",
       "      <td>INLAND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13788</th>\n",
       "      <td>21557</td>\n",
       "      <td>-121.32</td>\n",
       "      <td>39.43</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1864.0</td>\n",
       "      <td>412.0</td>\n",
       "      <td>744.0</td>\n",
       "      <td>349.0</td>\n",
       "      <td>1.8672</td>\n",
       "      <td>84701.0</td>\n",
       "      <td>INLAND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13789</th>\n",
       "      <td>21558</td>\n",
       "      <td>-121.24</td>\n",
       "      <td>39.37</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2787.0</td>\n",
       "      <td>616.0</td>\n",
       "      <td>1387.0</td>\n",
       "      <td>532.0</td>\n",
       "      <td>2.3886</td>\n",
       "      <td>89401.0</td>\n",
       "      <td>INLAND</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20640 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          id  longitude  latitude  housing_median_age  total_rooms  \\\n",
       "0          1    -122.23     37.88                45.0        884.0   \n",
       "1          2    -122.22     37.86                23.0       7103.0   \n",
       "2          3    -122.24     37.85                53.0       1468.0   \n",
       "6          4    -122.25     37.85                55.0       1278.0   \n",
       "7          5    -122.25     37.85                54.0       1628.0   \n",
       "...      ...        ...       ...                 ...          ...   \n",
       "11988  21554    -121.09     39.48                28.0       1665.0   \n",
       "13786  21555    -121.21     39.49                18.0        701.0   \n",
       "13787  21556    -121.22     39.43                19.0       2257.0   \n",
       "13788  21557    -121.32     39.43                21.0       1864.0   \n",
       "13789  21558    -121.24     39.37                18.0       2787.0   \n",
       "\n",
       "       total_bedrooms  population  households  median_income  \\\n",
       "0               131.0       323.0       130.0         8.3252   \n",
       "1              1108.0      2403.0      1141.0         8.3014   \n",
       "2               193.0       500.0       180.0         7.2574   \n",
       "6               236.0       558.0       222.0         5.6431   \n",
       "7               282.0       568.0       262.0         3.8462   \n",
       "...               ...         ...         ...            ...   \n",
       "11988           374.0       847.0       332.0         1.5603   \n",
       "13786           154.0       360.0       114.0         2.5568   \n",
       "13787           488.0      1007.0       437.0         1.7000   \n",
       "13788           412.0       744.0       349.0         1.8672   \n",
       "13789           616.0      1387.0       532.0         2.3886   \n",
       "\n",
       "       median_house_value ocean_proximity  \n",
       "0                452603.0        NEAR BAY  \n",
       "1                358502.0        NEAR BAY  \n",
       "2                352104.0        NEAR BAY  \n",
       "6                341300.0        NEAR BAY  \n",
       "7                342200.0        NEAR BAY  \n",
       "...                   ...             ...  \n",
       "11988             78101.0          INLAND  \n",
       "13786             77102.0          INLAND  \n",
       "13787             92301.0          INLAND  \n",
       "13788             84701.0          INLAND  \n",
       "13789             89401.0          INLAND  \n",
       "\n",
       "[20640 rows x 11 columns]"
      ]
     },
     "execution_count": 698,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###Update the column names and column order as shown below to match the data from the module:\n",
    "##longitude\n",
    "##latitude\n",
    "##housing_median_age\n",
    "##total_rooms\n",
    "#total_bedrooms\n",
    "#population\n",
    "#households\n",
    "#median_income\n",
    "#median_house_value\n",
    "#ocean_proximity\n",
    "\n",
    "housing1.rename(columns = {'medianHouseValue':'median_house_value', 'housingMedianAge':'housing_median_age',\n",
    "                              'totalBedrooms':'total_bedrooms', 'totalRooms':'total_rooms', \n",
    "                          'medianIncome':'median_income'}, inplace = True)\n",
    "housing1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cce578e-4259-4450-8704-8757e9172c85",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 699,
   "id": "1ee457f2-72a0-424c-9304-7354c8287309",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Change all columns to a float data type except for the ocean_proximity column. \n",
    "##The ocean_proximity column should remain a string/object data type (do not update this \n",
    "##to a categorical data type since that will be done later when working with the module data).\n",
    "\n",
    "housing1 = housing1.astype({'longitude':'float', 'latitude':'float', 'housing_median_age':'float', 'total_rooms' :'float', 'total_bedrooms':'float',\n",
    "                          'population':'float', 'households':'float','median_income':'float', \n",
    "         'median_house_value':'float'})\n",
    "\n",
    "##Sort the final housing DataFrame by id in ascending order\n",
    "housing = housing1.drop(['id'], axis=1)\n",
    "housing = housing.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 700,
   "id": "48d64a82-4b20-4bee-a37c-773e9ca36785",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Reset the DataFrame index so that it goes from 0 to n-1, where n is the number of rows in your DataFrame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7cb0d18-2dc0-4a8c-b190-eae55dbe10f8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3258db3f-8afd-42e6-8af4-594e015b25a6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "839a8814-53ef-4015-85a1-765f8ad4ca7d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
